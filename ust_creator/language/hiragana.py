import pykakasi
import logging

from .language import Language

logger = logging.getLogger(__name__)


class Hiragana(Language):
    _kks = None

    _charset = [
        'あ', 'い', 'う', 'え', 'お',
        'か', 'き', 'く', 'け', 'こ',
        'が', 'ぎ', 'ぐ', 'げ', 'ご',
        'さ', 'し', 'す', 'せ', 'そ',
        'ざ', 'じ', 'ず', 'ぜ', 'ぞ',
        'た', 'ち', 'つ', 'て', 'と',
        'だ', 'ぢ', 'づ', 'で', 'ど',
        'な', 'に', 'ぬ', 'ね', 'の',
        'は', 'ひ', 'ふ', 'へ', 'ほ',
        'ば', 'び', 'ぶ', 'べ', 'ぼ',
        'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',
        'ま', 'み', 'む', 'め', 'も',
        'や', 'ゆ', 'よ',
        'ら', 'り', 'る', 'れ', 'ろ',
        'わ', 'を', 'ん',
        'きゃ', 'きゅ', 'きょ',
        'ぎゃ', 'ぎゅ', 'ぎょ',
        'しゃ', 'しゅ', 'しょ',
        'じゃ', 'じゅ', 'じょ',
        'ちゃ', 'ちゅ', 'ちょ',
        'ぢゃ', 'ぢゅ', 'ぢょ',
        'にゃ', 'にゅ', 'にょ',
        'ひゃ', 'ひゅ', 'ひょ',
        'びゃ', 'びゅ', 'びょ',
        'ぴゃ', 'ぴゅ', 'ぴょ',
        'みゃ', 'みゅ', 'みょ',
        'りゃ', 'りゅ', 'りょ',
        'きぇ',  # 'きぁ', 'きぃ', 'きぅ', 'きぉ',
        'ぎぇ',  # 'ぎぁ', 'ぎぃ', 'ぎぅ', 'ぎぉ',
        'しぇ',  # 'しぁ', 'しぃ', 'しぅ', 'しぉ',
        'じぇ',  # 'じぁ', 'じぃ', 'じぅ',  'じぉ',
        'ちぇ',  # 'ちぁ', 'ちぃ', 'ちぅ',  'ちぉ',
        # 'ぢぇ', 'ぢぁ', 'ぢぃ', 'ぢぅ',  'ぢぉ',
        'にぇ',  # 'にぁ', 'にぃ', 'にぅ', 'にぉ',
        'ひぇ',  # 'ひぁ', 'ひぃ', 'ひぅ', 'ひぉ',
        'びぇ',  # 'びぁ', 'びぃ', 'びぅ', 'びぉ',
        'ぴぇ',  # 'ぴぁ', 'ぴぃ', 'ぴぅ', 'ぴぉ',
        'みぇ',  # 'みぁ', 'みぃ', 'みぅ', 'みぉ',
        'りぇ',  # 'りぁ', 'りぃ', 'りぅ',  'りぉ',

        'ふぁ', 'ふぃ', 'ふぅ', 'ふぇ', 'ふぉ',

        # 'ゃ', 'ゅ', 'ょ',
        # 'ぁ', 'ぃ', 'ぅ', 'ぇ', 'ぉ',

        'っ',
        '-',
        'R'
    ]

    _as_valid = {
        '\n': 'R', ' ': 'R'
    }

    _suffix_lookup = {
        'あ': 'a', 'い': 'i', 'う': 'u', 'え': 'e', 'お': 'o',
        'か': 'a', 'き': 'i', 'く': 'u', 'け': 'e', 'こ': 'o',
        'が': 'a', 'ぎ': 'i', 'ぐ': 'u', 'げ': 'e', 'ご': 'o',
        'さ': 'a', 'し': 'i', 'す': 'u', 'せ': 'e', 'そ': 'o',
        'ざ': 'a', 'じ': 'i', 'ず': 'u', 'ぜ': 'e', 'ぞ': 'o',
        'た': 'a', 'ち': 'i', 'つ': 'u', 'て': 'e', 'と': 'o',
        'だ': 'a', 'ぢ': 'i', 'づ': 'u', 'で': 'e', 'ど': 'o',
        'な': 'a', 'に': 'i', 'ぬ': 'u', 'ね': 'e', 'の': 'o',
        'は': 'a', 'ひ': 'i', 'ふ': 'u', 'へ': 'e', 'ほ': 'o',
        'ば': 'a', 'び': 'i', 'ぶ': 'u', 'べ': 'e', 'ぼ': 'o',
        'ぱ': 'a', 'ぴ': 'i', 'ぷ': 'u', 'ぺ': 'e', 'ぽ': 'o',
        'ま': 'a', 'み': 'i', 'む': 'u', 'め': 'e', 'も': 'o',
        'や': 'a', 'ゆ': 'u', 'よ': 'o',
        'ら': 'a', 'り': 'i', 'る': 'u', 'れ': 'e', 'ろ': 'o',
        'わ': 'a', 'を': 'o', 'ん': '-',
        'きゃ': 'a', 'きゅ': 'u', 'きょ': 'o',
        'ぎゃ': 'a', 'ぎゅ': 'u', 'ぎょ': 'o',
        'しゃ': 'a', 'しゅ': 'u', 'しょ': 'o',
        'じゃ': 'a', 'じゅ': 'u', 'じょ': 'o',
        'ちゃ': 'a', 'ちゅ': 'u', 'ちょ': 'o',
        'ぢゃ': 'a', 'ぢゅ': 'u', 'ぢょ': 'o',
        'にゃ': 'a', 'にゅ': 'u', 'にょ': 'o',
        'ひゃ': 'a', 'ひゅ': 'u', 'ひょ': 'o',
        'びゃ': 'a', 'びゅ': 'u', 'びょ': 'o',
        'ぴゃ': 'a', 'ぴゅ': 'u', 'ぴょ': 'o',
        'みゃ': 'a', 'みゅ': 'u', 'みょ': 'o',
        'りゃ': 'a', 'りゅ': 'u', 'りょ': 'o',
        'きぇ': 'e',  # 'きぁ': 'a', 'きぃ': 'i', 'きぅ': 'u', 'きぉ': 'o',
        'ぎぇ': 'e',  # 'ぎぁ': 'a', 'ぎぃ': 'i', 'ぎぅ': 'u', 'ぎぉ': 'o',
        'しぇ': 'e',  # 'しぁ': 'a', 'しぃ': 'i', 'しぅ': 'u', 'しぉ': 'o',
        'じぇ': 'e',  # 'じぁ': 'a', 'じぃ': 'i', 'じぅ': 'u', 'じぉ': 'o',
        'ちぇ': 'e',  # 'ちぁ': 'a', 'ちぃ': 'i', 'ちぅ': 'u', 'ちぉ': 'o',
        # 'ぢぇ': 'e', 'ぢぁ': 'a', 'ぢぃ': 'i', 'ぢぅ': 'u', 'ぢぉ': 'o',
        'にぇ': 'e',  # 'にぁ': 'a', 'にぃ': 'i', 'にぅ': 'u', 'にぉ': 'o',
        'ひぇ': 'e',  # 'ひぁ': 'a', 'ひぃ': 'i', 'ひぅ': 'u', 'ひぉ': 'o',
        'びぇ': 'e',  # 'びぁ': 'a', 'びぃ': 'i', 'びぅ': 'u', 'びぉ': 'o',
        'ぴぇ': 'e',  # 'ぴぁ': 'a', 'ぴぃ': 'i', 'ぴぅ': 'u', 'ぴぉ': 'o',
        'みぇ': 'e',  # 'みぁ': 'a', 'みぃ': 'i', 'みぅ': 'u', 'みぉ': 'o',
        'りぇ': 'e',  # 'りぁ': 'a', 'りぃ': 'i', 'りぅ': 'u', 'りぉ': 'o',

        'ふぁ': 'a', 'ふぃ': 'i', 'ふぅ': 'u', 'ふぇ': 'e', 'ふぉ': 'o',

        'ゃ': 'a', 'ゅ': 'u', 'ょ': 'o',
        'ぁ': 'a', 'ぃ': 'i', 'ぅ': 'u', 'ぇ': 'e', 'ぉ': 'o',

        'っ': '-',
        '-': '-', 'R': '-'
    }

    _conversion_list = [
        ('0', 'ゼロ'),
        ('1', '一'),
        ('１', '一'),
        ('2', 'ニ'),
        ('２', 'ニ'),
        ('3', '三'),
        ('4', '四'),
        ('5', '五'),
        ('6', '六'),
        ('7', '七'),
        ('8', '八'),
        ('9', '九'),
        ('ｍ', 'メートル'),

        ('は', 'わ'),

        ('ア', 'あ'), ('イ', 'い'), ('ウ', 'う'), ('エ', 'え'), ('オ', 'お'),
        ('カ', 'か'), ('キ', 'き'), ('ク', 'く'), ('ケ', 'け'), ('コ', 'こ'),
        ('ガ', 'が'), ('ギ', 'ぎ'), ('グ', 'ぐ'), ('ゲ', 'げ'), ('ゴ', 'ご'),
        ('サ', 'さ'), ('シ', 'し'), ('ス', 'す'), ('セ', 'せ'), ('ソ', 'そ'),
        ('ザ', 'ざ'), ('ジ', 'じ'), ('ズ', 'ず'), ('ゼ', 'ぜ'), ('ゾ', 'ぞ'),
        ('タ', 'た'), ('千', 'ち'), ('ツ', 'つ'), ('テ', 'て'), ('ト', 'と'),
        ('ダ', 'だ'), ('ヂ', 'ぢ'), ('ヅ', 'づ'), ('デ', 'で'), ('ド', 'ど'),
        ('ナ', 'な'), ('ニ', 'に'), ('ヌ', 'ぬ'), ('ネ', 'ね'), ('ノ', 'の'),
        ('ハ', 'は'), ('ヒ', 'ひ'), ('フ', 'ふ'), ('ヘ', 'へ'), ('ホ', 'ほ'),
        ('バ', 'ば'), ('ビ', 'び'), ('ブ', 'ぶ'), ('ベ', 'べ'), ('ボ', 'ぼ'),
        ('パ', 'ぱ'), ('ピ', 'ぴ'), ('プ', 'ぷ'), ('ペ', 'ぺ'), ('ポ', 'ぽ'),
        ('マ', 'ま'), ('三', 'み'), ('ム', 'む'), ('メ', 'め'), ('モ', 'も'),
        ('ヤ', 'や'), ('ユ', 'ゆ'), ('ヨ', 'よ'),
        ('ラ', 'ら'), ('リ', 'り'), ('ル', 'る'), ('レ', 'れ'), ('ロ', 'ろ'),
        ('ワ', 'わ'), ('ヲ', 'を'), ('ン', 'ん'),
        ('ャ', 'ゃ'), ('ュ', 'ゅ'), ('ョ', 'ょ'),
        ('ァ', 'ぁ'), ('ィ', 'ぃ'), ('ゥ', 'ぅ'), ('ェ', 'ぇ'), ('ォ', 'ぉ'),
        ('ッ', 'っ'),

        ('[', ''),
        (']', ''),
        ('-', ''),
        ('ー', '-'),
        ('・', ''),
        ('、', ''),
        ('。', ''),
        ('！', ''),
    ]

    _kana_removal_list = [
        ('　', ' ')
    ]

    @classmethod
    def is_conversion_section(cls, line: str) -> bool:
        return line in [
            '[TO_KANA]',
            '[DEFAULT]',
        ]

    @classmethod
    def convert_section(cls, line: str, conversion_key: str) -> str:
        if not conversion_key or conversion_key == '[DEFAULT]':
            pass

        elif conversion_key == '[TO_KANA]':
            line = cls._prepare_kana(line)
            result = cls._kks.convert(line)
            line = ' '.join([item['hira'] for item in result])
            line = cls._clean_kana(line)

        else:
            logger.info(f"Unknown conversion_key: {conversion_key}")

        return line

    @classmethod
    def _prepare_kana(cls, line: str) -> str:
        if cls._kks is None:
            cls._kks = pykakasi.kakasi()

        for src, dest in cls._conversion_list:
            logger.debug(f"{src} -> {dest}")
            line = line.replace(src, dest)

        logger.debug('========================')
        logger.debug(f"converting to hiragana: {line}")

        return line

    @classmethod
    def _clean_kana(cls, line: str) -> str:
        for src, dest in cls._kana_removal_list:
            logger.debug(f"{src} -> {dest}")
            line = line.replace(src, dest)

        logger.debug(f"result: {line}")
        logger.debug('========================')

        return line
